/*
 * generated by Xtext
 */
grammar InternalAltarica;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.osate.altarica.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.osate.altarica.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.osate.altarica.services.AltaricaGrammarAccess;

}

@parser::members {
 
 	private AltaricaGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AltaricaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
(rule__Model__DeclarationsAssignment)*
{ after(grammarAccess.getModelAccess().getDeclarationsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractDeclaration
entryRuleAbstractDeclaration 
:
{ before(grammarAccess.getAbstractDeclarationRule()); }
	 ruleAbstractDeclaration
{ after(grammarAccess.getAbstractDeclarationRule()); } 
	 EOF 
;

// Rule AbstractDeclaration
ruleAbstractDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractDeclarationAccess().getAlternatives()); }
(rule__AbstractDeclaration__Alternatives)
{ after(grammarAccess.getAbstractDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDomain
entryRuleDomain 
:
{ before(grammarAccess.getDomainRule()); }
	 ruleDomain
{ after(grammarAccess.getDomainRule()); } 
	 EOF 
;

// Rule Domain
ruleDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainAccess().getGroup()); }
(rule__Domain__Group__0)
{ after(grammarAccess.getDomainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSymbolicConstant
entryRuleSymbolicConstant 
:
{ before(grammarAccess.getSymbolicConstantRule()); }
	 ruleSymbolicConstant
{ after(grammarAccess.getSymbolicConstantRule()); } 
	 EOF 
;

// Rule SymbolicConstant
ruleSymbolicConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSymbolicConstantAccess().getGroup()); }
(rule__SymbolicConstant__Group__0)
{ after(grammarAccess.getSymbolicConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseType
entryRuleBaseType 
:
{ before(grammarAccess.getBaseTypeRule()); }
	 ruleBaseType
{ after(grammarAccess.getBaseTypeRule()); } 
	 EOF 
;

// Rule BaseType
ruleBaseType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseTypeAccess().getNameAssignment()); }
(rule__BaseType__NameAssignment)
{ after(grammarAccess.getBaseTypeAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedType
entryRuleNamedType 
:
{ before(grammarAccess.getNamedTypeRule()); }
	 ruleNamedType
{ after(grammarAccess.getNamedTypeRule()); } 
	 EOF 
;

// Rule NamedType
ruleNamedType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedTypeAccess().getRefAssignment()); }
(rule__NamedType__RefAssignment)
{ after(grammarAccess.getNamedTypeAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClass
entryRuleClass 
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassAccess().getGroup()); }
(rule__Class__Group__0)
{ after(grammarAccess.getClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventDeclaration
entryRuleEventDeclaration 
:
{ before(grammarAccess.getEventDeclarationRule()); }
	 ruleEventDeclaration
{ after(grammarAccess.getEventDeclarationRule()); } 
	 EOF 
;

// Rule EventDeclaration
ruleEventDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup()); }
(rule__EventDeclaration__Group__0)
{ after(grammarAccess.getEventDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration 
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
(rule__ParameterDeclaration__Group__0)
{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObserverDeclaration
entryRuleObserverDeclaration 
:
{ before(grammarAccess.getObserverDeclarationRule()); }
	 ruleObserverDeclaration
{ after(grammarAccess.getObserverDeclarationRule()); } 
	 EOF 
;

// Rule ObserverDeclaration
ruleObserverDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObserverDeclarationAccess().getGroup()); }
(rule__ObserverDeclaration__Group__0)
{ after(grammarAccess.getObserverDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabeledTransition
entryRuleLabeledTransition 
:
{ before(grammarAccess.getLabeledTransitionRule()); }
	 ruleLabeledTransition
{ after(grammarAccess.getLabeledTransitionRule()); } 
	 EOF 
;

// Rule LabeledTransition
ruleLabeledTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabeledTransitionAccess().getGroup()); }
(rule__LabeledTransition__Group__0)
{ after(grammarAccess.getLabeledTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionAnd
entryRuleTransitionAnd 
:
{ before(grammarAccess.getTransitionAndRule()); }
	 ruleTransitionAnd
{ after(grammarAccess.getTransitionAndRule()); } 
	 EOF 
;

// Rule TransitionAnd
ruleTransitionAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAndAccess().getGroup()); }
(rule__TransitionAnd__Group__0)
{ after(grammarAccess.getTransitionAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionOr
entryRuleTransitionOr 
:
{ before(grammarAccess.getTransitionOrRule()); }
	 ruleTransitionOr
{ after(grammarAccess.getTransitionOrRule()); } 
	 EOF 
;

// Rule TransitionOr
ruleTransitionOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionOrAccess().getGroup()); }
(rule__TransitionOr__Group__0)
{ after(grammarAccess.getTransitionOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSkip
entryRuleSkip 
:
{ before(grammarAccess.getSkipRule()); }
	 ruleSkip
{ after(grammarAccess.getSkipRule()); } 
	 EOF 
;

// Rule Skip
ruleSkip
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSkipAccess().getGroup()); }
(rule__Skip__Group__0)
{ after(grammarAccess.getSkipAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditional
entryRuleConditional 
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalAccess().getGroup()); }
(rule__Conditional__Group__0)
{ after(grammarAccess.getConditionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitch
entryRuleSwitch 
:
{ before(grammarAccess.getSwitchRule()); }
	 ruleSwitch
{ after(grammarAccess.getSwitchRule()); } 
	 EOF 
;

// Rule Switch
ruleSwitch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchAccess().getGroup()); }
(rule__Switch__Group__0)
{ after(grammarAccess.getSwitchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCaseExpression
entryRuleCaseExpression 
:
{ before(grammarAccess.getCaseExpressionRule()); }
	 ruleCaseExpression
{ after(grammarAccess.getCaseExpressionRule()); } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseExpressionAccess().getGroup()); }
(rule__CaseExpression__Group__0)
{ after(grammarAccess.getCaseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getLogicalParserRuleCall()); }
	ruleLogical
{ after(grammarAccess.getExpressionAccess().getLogicalParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogical
entryRuleLogical 
:
{ before(grammarAccess.getLogicalRule()); }
	 ruleLogical
{ after(grammarAccess.getLogicalRule()); } 
	 EOF 
;

// Rule Logical
ruleLogical
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAccess().getGroup()); }
(rule__Logical__Group__0)
{ after(grammarAccess.getLogicalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelation
entryRuleRelation 
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationAccess().getGroup()); }
(rule__Relation__Group__0)
{ after(grammarAccess.getRelationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNeg
entryRuleNeg 
:
{ before(grammarAccess.getNegRule()); }
	 ruleNeg
{ after(grammarAccess.getNegRule()); } 
	 EOF 
;

// Rule Neg
ruleNeg
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegAccess().getAlternatives()); }
(rule__Neg__Alternatives)
{ after(grammarAccess.getNegAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtom
entryRuleAtom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
(rule__IntegerLiteral__ValueAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNameRef
entryRuleNameRef 
:
{ before(grammarAccess.getNameRefRule()); }
	 ruleNameRef
{ after(grammarAccess.getNameRefRule()); } 
	 EOF 
;

// Rule NameRef
ruleNameRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameRefAccess().getGroup()); }
(rule__NameRef__Group__0)
{ after(grammarAccess.getNameRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BaseTypeEnum
ruleBaseTypeEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseTypeEnumAccess().getAlternatives()); }
(rule__BaseTypeEnum__Alternatives)
{ after(grammarAccess.getBaseTypeEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AbstractDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractDeclarationAccess().getDomainParserRuleCall_0()); }
	ruleDomain
{ after(grammarAccess.getAbstractDeclarationAccess().getDomainParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractDeclarationAccess().getClassParserRuleCall_1()); }
	ruleClass
{ after(grammarAccess.getAbstractDeclarationAccess().getClassParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getBaseTypeParserRuleCall_0()); }
(	ruleBaseType)
{ after(grammarAccess.getTypeAccess().getBaseTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getNamedTypeParserRuleCall_1()); }
	ruleNamedType
{ after(grammarAccess.getTypeAccess().getNamedTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getVariableDeclarationParserRuleCall_0()); }
	ruleVariableDeclaration
{ after(grammarAccess.getDeclarationAccess().getVariableDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getEventDeclarationParserRuleCall_1()); }
	ruleEventDeclaration
{ after(grammarAccess.getDeclarationAccess().getEventDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getParameterDeclarationParserRuleCall_2()); }
	ruleParameterDeclaration
{ after(grammarAccess.getDeclarationAccess().getParameterDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getObserverDeclarationParserRuleCall_3()); }
	ruleObserverDeclaration
{ after(grammarAccess.getDeclarationAccess().getObserverDeclarationParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getSkipParserRuleCall_0()); }
	ruleSkip
{ after(grammarAccess.getInstructionAccess().getSkipParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getAssignmentParserRuleCall_1()); }
	ruleAssignment
{ after(grammarAccess.getInstructionAccess().getAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getBlockParserRuleCall_2()); }
	ruleBlock
{ after(grammarAccess.getInstructionAccess().getBlockParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getConditionalParserRuleCall_3()); }
	ruleConditional
{ after(grammarAccess.getInstructionAccess().getConditionalParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getSwitchParserRuleCall_4()); }
	ruleSwitch
{ after(grammarAccess.getInstructionAccess().getSwitchParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__OpAlternatives_1_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getOpAndKeyword_1_0_1_0_0()); }

	'and' 

{ after(grammarAccess.getLogicalAccess().getOpAndKeyword_1_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getLogicalAccess().getOpOrKeyword_1_0_1_0_1()); }

	'or' 

{ after(grammarAccess.getLogicalAccess().getOpOrKeyword_1_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__OpAlternatives_1_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getOpEqualsSignKeyword_1_0_1_0_0()); }

	'=' 

{ after(grammarAccess.getRelationAccess().getOpEqualsSignKeyword_1_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0_1()); }

	'!=' 

{ after(grammarAccess.getRelationAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0_1()); }
)

    |(
{ before(grammarAccess.getRelationAccess().getOpLessThanSignKeyword_1_0_1_0_2()); }

	'<' 

{ after(grammarAccess.getRelationAccess().getOpLessThanSignKeyword_1_0_1_0_2()); }
)

    |(
{ before(grammarAccess.getRelationAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_3()); }

	'<=' 

{ after(grammarAccess.getRelationAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_3()); }
)

    |(
{ before(grammarAccess.getRelationAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_4()); }

	'>=' 

{ after(grammarAccess.getRelationAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_4()); }
)

    |(
{ before(grammarAccess.getRelationAccess().getOpGreaterThanSignKeyword_1_0_1_0_5()); }

	'>' 

{ after(grammarAccess.getRelationAccess().getOpGreaterThanSignKeyword_1_0_1_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OpAlternatives_1_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_0_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_0_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OpAlternatives_1_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_0_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_0_1_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getGroup_0()); }
(rule__Neg__Group_0__0)
{ after(grammarAccess.getNegAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNegAccess().getGroup_1()); }
(rule__Neg__Group_1__0)
{ after(grammarAccess.getNegAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getNegAccess().getAtomParserRuleCall_2()); }
	ruleAtom
{ after(grammarAccess.getNegAccess().getAtomParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getBooleanLiteralParserRuleCall_0()); }
	ruleBooleanLiteral
{ after(grammarAccess.getAtomAccess().getBooleanLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_1()); }
	ruleStringLiteral
{ after(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getIntegerLiteralParserRuleCall_2()); }
	ruleIntegerLiteral
{ after(grammarAccess.getAtomAccess().getIntegerLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getNameRefParserRuleCall_3()); }
	ruleNameRef
{ after(grammarAccess.getAtomAccess().getNameRefParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getGroup_4()); }
(rule__Atom__Group_4__0)
{ after(grammarAccess.getAtomAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseTypeEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseTypeEnumAccess().getINTEGEREnumLiteralDeclaration_0()); }
(	'Integer' 
)
{ after(grammarAccess.getBaseTypeEnumAccess().getINTEGEREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBaseTypeEnumAccess().getBOOLEANEnumLiteralDeclaration_1()); }
(	'Boolean' 
)
{ after(grammarAccess.getBaseTypeEnumAccess().getBOOLEANEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Domain__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__0__Impl
	rule__Domain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getDomainAction_0()); }
(

)
{ after(grammarAccess.getDomainAccess().getDomainAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__1__Impl
	rule__Domain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getDomainKeyword_1()); }

	'domain' 

{ after(grammarAccess.getDomainAccess().getDomainKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__2__Impl
	rule__Domain__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getNameAssignment_2()); }
(rule__Domain__NameAssignment_2)
{ after(grammarAccess.getDomainAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__3__Impl
	rule__Domain__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getDomainAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__4__Impl
	rule__Domain__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getGroup_4()); }
(rule__Domain__Group_4__0)?
{ after(grammarAccess.getDomainAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__5__Impl
	rule__Domain__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getDomainAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getDomainAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Domain__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group_4__0__Impl
	rule__Domain__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getConstantsAssignment_4_0()); }
(rule__Domain__ConstantsAssignment_4_0)
{ after(grammarAccess.getDomainAccess().getConstantsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getGroup_4_1()); }
(rule__Domain__Group_4_1__0)*
{ after(grammarAccess.getDomainAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Domain__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group_4_1__0__Impl
	rule__Domain__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getDomainAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Domain__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Domain__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getConstantsAssignment_4_1_1()); }
(rule__Domain__ConstantsAssignment_4_1_1)
{ after(grammarAccess.getDomainAccess().getConstantsAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SymbolicConstant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SymbolicConstant__Group__0__Impl
	rule__SymbolicConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolicConstant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolicConstantAccess().getSymbolicConstantAction_0()); }
(

)
{ after(grammarAccess.getSymbolicConstantAccess().getSymbolicConstantAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SymbolicConstant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SymbolicConstant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolicConstant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolicConstantAccess().getNameAssignment_1()); }
(rule__SymbolicConstant__NameAssignment_1)
{ after(grammarAccess.getSymbolicConstantAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Class__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNodeAction_0()); }
(

)
{ after(grammarAccess.getClassAccess().getNodeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getClassKeyword_1()); }

	'class' 

{ after(grammarAccess.getClassAccess().getClassKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameAssignment_2()); }
(rule__Class__NameAssignment_2)
{ after(grammarAccess.getClassAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getDeclarationsAssignment_3()); }
(rule__Class__DeclarationsAssignment_3)*
{ after(grammarAccess.getClassAccess().getDeclarationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__4__Impl
	rule__Class__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getGroup_4()); }
(rule__Class__Group_4__0)?
{ after(grammarAccess.getClassAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__5__Impl
	rule__Class__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getGroup_5()); }
(rule__Class__Group_5__0)?
{ after(grammarAccess.getClassAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getEndKeyword_6()); }

	'end' 

{ after(grammarAccess.getClassAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Class__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_4__0__Impl
	rule__Class__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getTransitionKeyword_4_0()); }

	'transition' 

{ after(grammarAccess.getClassAccess().getTransitionKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getClassAccess().getTransitionsAssignment_4_1()); }
(rule__Class__TransitionsAssignment_4_1)
{ after(grammarAccess.getClassAccess().getTransitionsAssignment_4_1()); }
)
(
{ before(grammarAccess.getClassAccess().getTransitionsAssignment_4_1()); }
(rule__Class__TransitionsAssignment_4_1)*
{ after(grammarAccess.getClassAccess().getTransitionsAssignment_4_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Class__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_5__0__Impl
	rule__Class__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getAssertionKeyword_5_0()); }

	'assertion' 

{ after(grammarAccess.getClassAccess().getAssertionKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getClassAccess().getAssertionsAssignment_5_1()); }
(rule__Class__AssertionsAssignment_5_1)
{ after(grammarAccess.getClassAccess().getAssertionsAssignment_5_1()); }
)
(
{ before(grammarAccess.getClassAccess().getAssertionsAssignment_5_1()); }
(rule__Class__AssertionsAssignment_5_1)*
{ after(grammarAccess.getClassAccess().getAssertionsAssignment_5_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVariableAction_0()); }
(

)
{ after(grammarAccess.getVariableDeclarationAccess().getVariableAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
(rule__VariableDeclaration__TypeAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
(rule__VariableDeclaration__NameAssignment_2)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
	rule__VariableDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
(rule__VariableDeclaration__Group_3__0)?
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__VariableDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__0__Impl
	rule__VariableDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getVariableDeclarationAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__1__Impl
	rule__VariableDeclaration__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getAttributesAssignment_3_1()); }
(rule__VariableDeclaration__AttributesAssignment_3_1)
{ after(grammarAccess.getVariableDeclarationAccess().getAttributesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__2__Impl
	rule__VariableDeclaration__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup_3_2()); }
(rule__VariableDeclaration__Group_3_2__0)*
{ after(grammarAccess.getVariableDeclarationAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getRightParenthesisKeyword_3_3()); }

	')' 

{ after(grammarAccess.getVariableDeclarationAccess().getRightParenthesisKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableDeclaration__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3_2__0__Impl
	rule__VariableDeclaration__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getVariableDeclarationAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getAttributesAssignment_3_2_1()); }
(rule__VariableDeclaration__AttributesAssignment_3_2_1)
{ after(grammarAccess.getVariableDeclarationAccess().getAttributesAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAttributeAction_0()); }
(

)
{ after(grammarAccess.getAttributeAccess().getAttributeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
(rule__Attribute__NameAssignment_1)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getAttributeAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Attribute__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueAssignment_3()); }
(rule__Attribute__ValueAssignment_3)
{ after(grammarAccess.getAttributeAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EventDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__0__Impl
	rule__EventDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getEventAction_0()); }
(

)
{ after(grammarAccess.getEventDeclarationAccess().getEventAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__1__Impl
	rule__EventDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getEventKeyword_1()); }

	'event' 

{ after(grammarAccess.getEventDeclarationAccess().getEventKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__2__Impl
	rule__EventDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getNameAssignment_2()); }
(rule__EventDeclaration__NameAssignment_2)
{ after(grammarAccess.getEventDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__3__Impl
	rule__EventDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup_3()); }
(rule__EventDeclaration__Group_3__0)?
{ after(grammarAccess.getEventDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getEventDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EventDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_3__0__Impl
	rule__EventDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getEventDeclarationAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_3__1__Impl
	rule__EventDeclaration__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getAttributesAssignment_3_1()); }
(rule__EventDeclaration__AttributesAssignment_3_1)
{ after(grammarAccess.getEventDeclarationAccess().getAttributesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_3__2__Impl
	rule__EventDeclaration__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getGroup_3_2()); }
(rule__EventDeclaration__Group_3_2__0)*
{ after(grammarAccess.getEventDeclarationAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getRightParenthesisKeyword_3_3()); }

	')' 

{ after(grammarAccess.getEventDeclarationAccess().getRightParenthesisKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EventDeclaration__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_3_2__0__Impl
	rule__EventDeclaration__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getEventDeclarationAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventDeclaration__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventDeclaration__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getAttributesAssignment_3_2_1()); }
(rule__EventDeclaration__AttributesAssignment_3_2_1)
{ after(grammarAccess.getEventDeclarationAccess().getAttributesAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getParameterAction_0()); }
(

)
{ after(grammarAccess.getParameterDeclarationAccess().getParameterAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__1__Impl
	rule__ParameterDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getParameterKeyword_1()); }

	'parameter' 

{ after(grammarAccess.getParameterDeclarationAccess().getParameterKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__2__Impl
	rule__ParameterDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_2()); }
(rule__ParameterDeclaration__TypeAssignment_2)
{ after(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__3__Impl
	rule__ParameterDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameAssignment_3()); }
(rule__ParameterDeclaration__NameAssignment_3)
{ after(grammarAccess.getParameterDeclarationAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__4__Impl
	rule__ParameterDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getEqualsSignKeyword_4()); }

	'=' 

{ after(grammarAccess.getParameterDeclarationAccess().getEqualsSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__5__Impl
	rule__ParameterDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getValueAssignment_5()); }
(rule__ParameterDeclaration__ValueAssignment_5)
{ after(grammarAccess.getParameterDeclarationAccess().getValueAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getParameterDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ObserverDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObserverDeclaration__Group__0__Impl
	rule__ObserverDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getObserverAction_0()); }
(

)
{ after(grammarAccess.getObserverDeclarationAccess().getObserverAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObserverDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObserverDeclaration__Group__1__Impl
	rule__ObserverDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getObserverKeyword_1()); }

	'observer' 

{ after(grammarAccess.getObserverDeclarationAccess().getObserverKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObserverDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObserverDeclaration__Group__2__Impl
	rule__ObserverDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getTypeAssignment_2()); }
(rule__ObserverDeclaration__TypeAssignment_2)
{ after(grammarAccess.getObserverDeclarationAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObserverDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObserverDeclaration__Group__3__Impl
	rule__ObserverDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getNameAssignment_3()); }
(rule__ObserverDeclaration__NameAssignment_3)
{ after(grammarAccess.getObserverDeclarationAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObserverDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObserverDeclaration__Group__4__Impl
	rule__ObserverDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getEqualsSignKeyword_4()); }

	'=' 

{ after(grammarAccess.getObserverDeclarationAccess().getEqualsSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObserverDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObserverDeclaration__Group__5__Impl
	rule__ObserverDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getValueAssignment_5()); }
(rule__ObserverDeclaration__ValueAssignment_5)
{ after(grammarAccess.getObserverDeclarationAccess().getValueAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObserverDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObserverDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getObserverDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__LabeledTransition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledTransition__Group__0__Impl
	rule__LabeledTransition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledTransition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTransitionAccess().getEventAssignment_0()); }
(rule__LabeledTransition__EventAssignment_0)
{ after(grammarAccess.getLabeledTransitionAccess().getEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledTransition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledTransition__Group__1__Impl
	rule__LabeledTransition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledTransition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTransitionAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getLabeledTransitionAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledTransition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledTransition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledTransition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTransitionAccess().getExpressionAssignment_2()); }
(rule__LabeledTransition__ExpressionAssignment_2)
{ after(grammarAccess.getLabeledTransitionAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TransitionAnd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionAnd__Group__0__Impl
	rule__TransitionAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionAnd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAndAccess().getTransitionOrParserRuleCall_0()); }
	ruleTransitionOr
{ after(grammarAccess.getTransitionAndAccess().getTransitionOrParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionAnd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionAnd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAndAccess().getGroup_1()); }
(rule__TransitionAnd__Group_1__0)*
{ after(grammarAccess.getTransitionAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionAnd__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionAnd__Group_1__0__Impl
	rule__TransitionAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionAnd__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAndAccess().getTransitionAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getTransitionAndAccess().getTransitionAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionAnd__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionAnd__Group_1__1__Impl
	rule__TransitionAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionAnd__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAndAccess().getAmpersandKeyword_1_1()); }

	'&' 

{ after(grammarAccess.getTransitionAndAccess().getAmpersandKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionAnd__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionAnd__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionAnd__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAndAccess().getRightAssignment_1_2()); }
(rule__TransitionAnd__RightAssignment_1_2)
{ after(grammarAccess.getTransitionAndAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TransitionOr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionOr__Group__0__Impl
	rule__TransitionOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionOr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionOrAccess().getTransitionParserRuleCall_0()); }
	ruleTransition
{ after(grammarAccess.getTransitionOrAccess().getTransitionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionOr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionOr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionOrAccess().getGroup_1()); }
(rule__TransitionOr__Group_1__0)*
{ after(grammarAccess.getTransitionOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionOr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionOr__Group_1__0__Impl
	rule__TransitionOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionOr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionOrAccess().getTransitionOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getTransitionOrAccess().getTransitionOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionOr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionOr__Group_1__1__Impl
	rule__TransitionOr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionOr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionOrAccess().getVerticalLineKeyword_1_1()); }

	'|' 

{ after(grammarAccess.getTransitionOrAccess().getVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionOr__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionOr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionOr__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionOrAccess().getRightAssignment_1_2()); }
(rule__TransitionOr__RightAssignment_1_2)
{ after(grammarAccess.getTransitionOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTransitionAction_0()); }
(

)
{ after(grammarAccess.getTransitionAccess().getTransitionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardAssignment_1()); }
(rule__Transition__GuardAssignment_1)
{ after(grammarAccess.getTransitionAccess().getGuardAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getActionAssignment_3()); }
(rule__Transition__ActionAssignment_3)
{ after(grammarAccess.getTransitionAccess().getActionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Skip__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Skip__Group__0__Impl
	rule__Skip__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipAccess().getSkipAction_0()); }
(

)
{ after(grammarAccess.getSkipAccess().getSkipAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Skip__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Skip__Group__1__Impl
	rule__Skip__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipAccess().getSkipKeyword_1()); }

	'skip' 

{ after(grammarAccess.getSkipAccess().getSkipKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Skip__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Skip__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Skip__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSkipAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getSkipAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignmentAction_0()); }
(

)
{ after(grammarAccess.getAssignmentAccess().getAssignmentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_1()); }
(rule__Assignment__VariableAssignment_1)
{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_2()); }

	':=' 

{ after(grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__3__Impl
	rule__Assignment__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_3()); }
(rule__Assignment__ValueAssignment_3)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getBlockAccess().getInstructionsAssignment_2()); }
(rule__Block__InstructionsAssignment_2)
{ after(grammarAccess.getBlockAccess().getInstructionsAssignment_2()); }
)
(
{ before(grammarAccess.getBlockAccess().getInstructionsAssignment_2()); }
(rule__Block__InstructionsAssignment_2)*
{ after(grammarAccess.getBlockAccess().getInstructionsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Conditional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getConditionalAction_0()); }
(

)
{ after(grammarAccess.getConditionalAccess().getConditionalAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__1__Impl
	rule__Conditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getIfKeyword_1()); }

	'if' 

{ after(grammarAccess.getConditionalAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__2__Impl
	rule__Conditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getConditionAssignment_2()); }
(rule__Conditional__ConditionAssignment_2)
{ after(grammarAccess.getConditionalAccess().getConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__3__Impl
	rule__Conditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getThenKeyword_3()); }

	'then' 

{ after(grammarAccess.getConditionalAccess().getThenKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__4__Impl
	rule__Conditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getThenAssignment_4()); }
(rule__Conditional__ThenAssignment_4)
{ after(grammarAccess.getConditionalAccess().getThenAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__5__Impl
	rule__Conditional__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getGroup_5()); }
(rule__Conditional__Group_5__0)?
{ after(grammarAccess.getConditionalAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getConditionalAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Conditional__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_5__0__Impl
	rule__Conditional__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getElseKeyword_5_0()); }
(
	'else' 
)
{ after(grammarAccess.getConditionalAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getElseAssignment_5_1()); }
(rule__Conditional__ElseAssignment_5_1)
{ after(grammarAccess.getConditionalAccess().getElseAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Switch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__0__Impl
	rule__Switch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getSwitchKeyword_0()); }

	'switch' 

{ after(grammarAccess.getSwitchAccess().getSwitchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__1__Impl
	rule__Switch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getSwitchAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__2__Impl
	rule__Switch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getCasesAssignment_2()); }
(rule__Switch__CasesAssignment_2)*
{ after(grammarAccess.getSwitchAccess().getCasesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__3__Impl
	rule__Switch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getElseKeyword_3()); }

	'else' 

{ after(grammarAccess.getSwitchAccess().getElseKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__4__Impl
	rule__Switch__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getColonKeyword_4()); }

	':' 

{ after(grammarAccess.getSwitchAccess().getColonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__5__Impl
	rule__Switch__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getElseAssignment_5()); }
(rule__Switch__ElseAssignment_5)
{ after(grammarAccess.getSwitchAccess().getElseAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__CaseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__0__Impl
	rule__CaseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getConditionAssignment_0()); }
(rule__CaseExpression__ConditionAssignment_0)
{ after(grammarAccess.getCaseExpressionAccess().getConditionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__1__Impl
	rule__CaseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getCaseExpressionAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__2__Impl
	rule__CaseExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getThenAssignment_2()); }
(rule__CaseExpression__ThenAssignment_2)
{ after(grammarAccess.getCaseExpressionAccess().getThenAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CaseExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CaseExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getCaseExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Logical__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group__0__Impl
	rule__Logical__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getRelationParserRuleCall_0()); }
	ruleRelation
{ after(grammarAccess.getLogicalAccess().getRelationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getGroup_1()); }
(rule__Logical__Group_1__0)*
{ after(grammarAccess.getLogicalAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getGroup_1_0()); }
(rule__Logical__Group_1_0__0)
{ after(grammarAccess.getLogicalAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Logical__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0__0__Impl
	rule__Logical__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getLogicalLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getLogicalAccess().getLogicalLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0__1__Impl
	rule__Logical__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getOpAssignment_1_0_1()); }
(rule__Logical__OpAssignment_1_0_1)
{ after(grammarAccess.getLogicalAccess().getOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getRightAssignment_1_0_2()); }
(rule__Logical__RightAssignment_1_0_2)
{ after(grammarAccess.getLogicalAccess().getRightAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Relation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__0__Impl
	rule__Relation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getRelationAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getGroup_1()); }
(rule__Relation__Group_1__0)*
{ after(grammarAccess.getRelationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getGroup_1_0()); }
(rule__Relation__Group_1_0__0)
{ after(grammarAccess.getRelationAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Relation__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group_1_0__0__Impl
	rule__Relation__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getEqualLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getRelationAccess().getEqualLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group_1_0__1__Impl
	rule__Relation__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getOpAssignment_1_0_1()); }
(rule__Relation__OpAssignment_1_0_1)
{ after(grammarAccess.getRelationAccess().getOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relation__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getRightAssignment_1_0_2()); }
(rule__Relation__RightAssignment_1_0_2)
{ after(grammarAccess.getRelationAccess().getRightAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0()); }
(rule__Addition__Group_1_0__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Addition__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0__0__Impl
	rule__Addition__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0__1__Impl
	rule__Addition__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getOpAssignment_1_0_1()); }
(rule__Addition__OpAssignment_1_0_1)
{ after(grammarAccess.getAdditionAccess().getOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_0_2()); }
(rule__Addition__RightAssignment_1_0_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getNegParserRuleCall_0()); }
	ruleNeg
{ after(grammarAccess.getMultiplicationAccess().getNegParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0()); }
(rule__Multiplication__Group_1_0__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Multiplication__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0__0__Impl
	rule__Multiplication__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0__1__Impl
	rule__Multiplication__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getOpAssignment_1_0_1()); }
(rule__Multiplication__OpAssignment_1_0_1)
{ after(grammarAccess.getMultiplicationAccess().getOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_0_2()); }
(rule__Multiplication__RightAssignment_1_0_2)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Neg__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Neg__Group_0__0__Impl
	rule__Neg__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getNotAction_0_0()); }
(

)
{ after(grammarAccess.getNegAccess().getNotAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Neg__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Neg__Group_0__1__Impl
	rule__Neg__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getNotKeyword_0_1()); }
(
	'not' 
)
{ after(grammarAccess.getNegAccess().getNotKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Neg__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Neg__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getExpressionAssignment_0_2()); }
(rule__Neg__ExpressionAssignment_0_2)
{ after(grammarAccess.getNegAccess().getExpressionAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Neg__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Neg__Group_1__0__Impl
	rule__Neg__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getMinusAction_1_0()); }
(

)
{ after(grammarAccess.getNegAccess().getMinusAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Neg__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Neg__Group_1__1__Impl
	rule__Neg__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getHyphenMinusKeyword_1_1()); }
(
	'-' 
)
{ after(grammarAccess.getNegAccess().getHyphenMinusKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Neg__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Neg__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getExpressionAssignment_1_2()); }
(rule__Neg__ExpressionAssignment_1_2)
{ after(grammarAccess.getNegAccess().getExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atom__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_4__0__Impl
	rule__Atom__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_0()); }

	'(' 

{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_4__1__Impl
	rule__Atom__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpressionParserRuleCall_4_1()); }
	ruleExpression
{ after(grammarAccess.getAtomAccess().getExpressionParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_2()); }

	')' 

{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NameRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameRef__Group__0__Impl
	rule__NameRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameRefAccess().getVariableAssignment_0()); }
(rule__NameRef__VariableAssignment_0)
{ after(grammarAccess.getNameRefAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameRefAccess().getGroup_1()); }
(rule__NameRef__Group_1__0)*
{ after(grammarAccess.getNameRefAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NameRef__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameRef__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameRef__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameRefAccess().getGroup_1_0()); }
(rule__NameRef__Group_1_0__0)
{ after(grammarAccess.getNameRefAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__NameRef__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameRef__Group_1_0__0__Impl
	rule__NameRef__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameRef__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameRefAccess().getNameRefNestedAction_1_0_0()); }
(

)
{ after(grammarAccess.getNameRefAccess().getNameRefNestedAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameRef__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameRef__Group_1_0__1__Impl
	rule__NameRef__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NameRef__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameRefAccess().getFullStopKeyword_1_0_1()); }

	'.' 

{ after(grammarAccess.getNameRefAccess().getFullStopKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NameRef__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NameRef__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameRef__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameRefAccess().getVariableAssignment_1_0_2()); }
(rule__NameRef__VariableAssignment_1_0_2)
{ after(grammarAccess.getNameRefAccess().getVariableAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__DeclarationsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDeclarationsAbstractDeclarationParserRuleCall_0()); }
	ruleAbstractDeclaration{ after(grammarAccess.getModelAccess().getDeclarationsAbstractDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getDomainAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__ConstantsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getConstantsSymbolicConstantParserRuleCall_4_0_0()); }
	ruleSymbolicConstant{ after(grammarAccess.getDomainAccess().getConstantsSymbolicConstantParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__ConstantsAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainAccess().getConstantsSymbolicConstantParserRuleCall_4_1_1_0()); }
	ruleSymbolicConstant{ after(grammarAccess.getDomainAccess().getConstantsSymbolicConstantParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SymbolicConstant__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSymbolicConstantAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSymbolicConstantAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseType__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseTypeAccess().getNameBaseTypeEnumEnumRuleCall_0()); }
	ruleBaseTypeEnum{ after(grammarAccess.getBaseTypeAccess().getNameBaseTypeEnumEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedType__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedTypeAccess().getRefNamedElementCrossReference_0()); }
(
{ before(grammarAccess.getNamedTypeAccess().getRefNamedElementIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getNamedTypeAccess().getRefNamedElementIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getNamedTypeAccess().getRefNamedElementCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__DeclarationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
	ruleDeclaration{ after(grammarAccess.getClassAccess().getDeclarationsDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__TransitionsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getTransitionsLabeledTransitionParserRuleCall_4_1_0()); }
	ruleLabeledTransition{ after(grammarAccess.getClassAccess().getTransitionsLabeledTransitionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__AssertionsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getAssertionsInstructionParserRuleCall_5_1_0()); }
	ruleInstruction{ after(grammarAccess.getClassAccess().getAssertionsInstructionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__AttributesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getAttributesAttributeParserRuleCall_3_1_0()); }
	ruleAttribute{ after(grammarAccess.getVariableDeclarationAccess().getAttributesAttributeParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__AttributesAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getAttributesAttributeParserRuleCall_3_2_1_0()); }
	ruleAttribute{ after(grammarAccess.getVariableDeclarationAccess().getAttributesAttributeParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getAttributeAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getEventDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__AttributesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getAttributesAttributeParserRuleCall_3_1_0()); }
	ruleAttribute{ after(grammarAccess.getEventDeclarationAccess().getAttributesAttributeParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventDeclaration__AttributesAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventDeclarationAccess().getAttributesAttributeParserRuleCall_3_2_1_0()); }
	ruleAttribute{ after(grammarAccess.getEventDeclarationAccess().getAttributesAttributeParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getParameterDeclarationAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__ValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getValueExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getParameterDeclarationAccess().getValueExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getObserverDeclarationAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getObserverDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObserverDeclaration__ValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObserverDeclarationAccess().getValueExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getObserverDeclarationAccess().getValueExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledTransition__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTransitionAccess().getEventNameRefParserRuleCall_0_0()); }
	ruleNameRef{ after(grammarAccess.getLabeledTransitionAccess().getEventNameRefParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledTransition__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledTransitionAccess().getExpressionTransitionAndParserRuleCall_2_0()); }
	ruleTransitionAnd{ after(grammarAccess.getLabeledTransitionAccess().getExpressionTransitionAndParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionAnd__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAndAccess().getRightTransitionOrParserRuleCall_1_2_0()); }
	ruleTransitionOr{ after(grammarAccess.getTransitionAndAccess().getRightTransitionOrParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionOr__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionOrAccess().getRightTransitionParserRuleCall_1_2_0()); }
	ruleTransition{ after(grammarAccess.getTransitionOrAccess().getRightTransitionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__GuardAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getGuardExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getTransitionAccess().getGuardExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ActionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getActionInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getTransitionAccess().getActionInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableNameRefParserRuleCall_1_0()); }
	ruleNameRef{ after(grammarAccess.getAssignmentAccess().getVariableNameRefParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__InstructionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getConditionalAccess().getConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ThenAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getThenInstructionParserRuleCall_4_0()); }
	ruleInstruction{ after(grammarAccess.getConditionalAccess().getThenInstructionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ElseAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalAccess().getElseInstructionParserRuleCall_5_1_0()); }
	ruleInstruction{ after(grammarAccess.getConditionalAccess().getElseInstructionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__CasesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getCasesCaseExpressionParserRuleCall_2_0()); }
	ruleCaseExpression{ after(grammarAccess.getSwitchAccess().getCasesCaseExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__ElseAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getElseExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getSwitchAccess().getElseExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__ConditionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getConditionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getCaseExpressionAccess().getConditionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CaseExpression__ThenAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseExpressionAccess().getThenInstructionParserRuleCall_2_0()); }
	ruleInstruction{ after(grammarAccess.getCaseExpressionAccess().getThenInstructionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getOpAlternatives_1_0_1_0()); }
(rule__Logical__OpAlternatives_1_0_1_0)
{ after(grammarAccess.getLogicalAccess().getOpAlternatives_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__RightAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getRightRelationParserRuleCall_1_0_2_0()); }
	ruleRelation{ after(grammarAccess.getLogicalAccess().getRightRelationParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getOpAlternatives_1_0_1_0()); }
(rule__Relation__OpAlternatives_1_0_1_0)
{ after(grammarAccess.getRelationAccess().getOpAlternatives_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__RightAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationAccess().getRightAdditionParserRuleCall_1_0_2_0()); }
	ruleAddition{ after(grammarAccess.getRelationAccess().getRightAdditionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getOpAlternatives_1_0_1_0()); }
(rule__Addition__OpAlternatives_1_0_1_0)
{ after(grammarAccess.getAdditionAccess().getOpAlternatives_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_0_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_0_1_0()); }
(rule__Multiplication__OpAlternatives_1_0_1_0)
{ after(grammarAccess.getMultiplicationAccess().getOpAlternatives_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightNegParserRuleCall_1_0_2_0()); }
	ruleNeg{ after(grammarAccess.getMultiplicationAccess().getRightNegParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__ExpressionAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getExpressionAtomParserRuleCall_0_2_0()); }
	ruleAtom{ after(grammarAccess.getNegAccess().getExpressionAtomParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Neg__ExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegAccess().getExpressionAtomParserRuleCall_1_2_0()); }
	ruleAtom{ after(grammarAccess.getNegAccess().getExpressionAtomParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
(rule__BooleanLiteral__ValueAlternatives_0)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameRef__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameRefAccess().getVariableNamedElementCrossReference_0_0()); }
(
{ before(grammarAccess.getNameRefAccess().getVariableNamedElementIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getNameRefAccess().getVariableNamedElementIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getNameRefAccess().getVariableNamedElementCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NameRef__VariableAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNameRefAccess().getVariableNamedElementCrossReference_1_0_2_0()); }
(
{ before(grammarAccess.getNameRefAccess().getVariableNamedElementIDTerminalRuleCall_1_0_2_0_1()); }
	RULE_ID{ after(grammarAccess.getNameRefAccess().getVariableNamedElementIDTerminalRuleCall_1_0_2_0_1()); }
)
{ after(grammarAccess.getNameRefAccess().getVariableNamedElementCrossReference_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_ALPHA : ('a'..'z'|'A'..'Z');

fragment RULE_DIGIT : '0'..'9';

fragment RULE_REGULAR_ID : (RULE_ALPHA|'_') (RULE_ALPHA|'_'|RULE_DIGIT)*;

fragment RULE_STRING_ID : '\'' (RULE_ALPHA|RULE_DIGIT|'!'|'#'|'$'|'%'|'&'|'('|')'|'*'|'+'|','|'-'|'.'|'/'|':'|';'|'<'|'>'|'='|'?'|'@'|'['|']'|'^'|'{'|'}'|'|'|'~'|'_')* '\'';

RULE_ID : (RULE_REGULAR_ID|RULE_STRING_ID);

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '"';

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


