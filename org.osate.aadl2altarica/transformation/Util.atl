-- @atlcompiler emftvm
-- @nsURI AR=http://osate.org/Altarica/2.1
-- @nsURI AADL=http://aadl.info/AADL/2.0/instance
-- @nsURI AADL2=http://aadl.info/AADL/2.0
-- @nsURI EMV2=http://www.aadl.info/EMV2

library Util;

-- The component classifier for a component instance
helper context AADL!ComponentInstance def: componentClassifier: AADL2!ComponentClassifier =
	"#native"!"org::osate::aadl2::instance::util::InstanceUtil".refInvokeStaticOperation(
		'getComponentClassifier', Sequence{self, 0, OclUndefined}
	);

helper context AADL!ComponentInstance def: isLeaf: Boolean =
	thisModule.emLeafComponents -> contains(self);

-- Helpers for EMV2 processing

helper context AADL2!Classifier def: outgoingErrorPropagations(): Sequence(EMV2!ErrorPropagation) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllOutgoingErrorPropagations', Sequence{self}
	);

helper context AADL2!Classifier def: incomingErrorPropagations(): Sequence(EMV2!ErrorPropagation) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllIncomingErrorPropagations', Sequence{self}
	);

helper context AADL2!Classifier def: errorPropagations(): Sequence(EMV2!ErrorPropagation) =
	self.incomingErrorPropagations() -> including(self.outgoingErrorPropagations()) -> flatten();

helper context AADL2!Classifier def: usedTypes(): Sequence(EMV2!ErrorModelLibrary) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getErrorModelSubclauseWithUseTypes', Sequence{self}
	);

helper context EMV2!TypeSet def: leafTypeTokens(useTypes: Sequence(EMV2!ErrorModelLibrary)): Sequence(EMV2!TypeToken) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EM2TypeSetUtil".refInvokeStaticOperation(
		'generateAllLeafTypeTokens', Sequence{self, useTypes}
	);

helper def: analysisModel: "#native"!"org::osate::xtext::aadl2::errormodel::util::AnalysisModel" =
	let si: AADL!SystemInstance = AADL!SystemInstance.allInstances() -> asSequence() -> first() in
		"#native"!"org::osate::xtext::aadl2::errormodel::util::AnalysisModel".refInvokeStaticOperation(
			'createAnalysisModel', Sequence{si});

-- Component instances that should be processed (leaf components wrt error model)
helper def: emLeafComponents: Sequence(AADL!ComponentInstance) = 
	thisModule.analysisModel.getSubcomponents();

helper def: propagationPaths: Sequence("#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord") =
	thisModule.analysisModel.getPropagationPaths();

-- Force evaluation of a lazy collection by getting its size
helper context Collection(OclAny) def: force(): Collection(OclAny) =
	let i: Integer = self.size() in self;

-- Replace invalid characters in identifier with '_'
helper context String def: normalizeId(): String =
	self.replaceAll('[:.]', '_');

helper context String def: quoted(): String =
	'"' + self + '"';

helper context EMV2!ErrorPropagation def: altaRicaName(): String =
	let
		ref: EMV2!FeatureorPPReference = self.getFeatureorPPRef()
	in
		ref.altaRicaName();

helper context EMV2!FeatureorPPReference def: altaRicaName(): String =
	let
		name: String = self.featureorPP.name
	in
		if self.next.oclIsUndefined() then name else name + '_' + self.next.altaRicaName() endif;

helper def: int: AR!BaseTypeEnum = #"Integer";
