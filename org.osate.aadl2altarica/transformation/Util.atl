-- AADL to AltaRica Translator
-- 
-- Copyright 2016 Carnegie Mellon University. All Rights Reserved.
-- 
-- NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE
-- MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO
-- WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
-- BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
-- EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON
-- UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM
-- PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
-- 
-- Released under a Eclipse Public License - v1.0-style license,
-- please see license.txt or contact permission@sei.cmu.edu for full terms.
-- 
-- DM16-0114

-- @atlcompiler emftvm
-- @nsURI AR=http://osate.org/Altarica/2.1
-- @nsURI AADL=http://aadl.info/AADL/2.0/instance
-- @nsURI AADL2=http://aadl.info/AADL/2.0
-- @nsURI EMV2=http://www.aadl.info/EMV2

library Util;

-- The component classifier for a component instance
helper context AADL!ComponentInstance def: classifier: AADL2!ComponentClassifier =
	"#native"!"org::osate::aadl2::instance::util::InstanceUtil".refInvokeStaticOperation(
		'getComponentClassifier', Sequence{self, 0, OclUndefined}
	);

helper context AADL!ComponentInstance def: process: Boolean =
	thisModule.componentsToProcess -> contains(self);

-- Helpers for EMV2 processing

helper context AADL2!Classifier def: outgoingErrorPropagations: Sequence(EMV2!ErrorPropagation) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllOutgoingErrorPropagations', Sequence{self}
	);

helper context AADL2!Classifier def: incomingErrorPropagations: Sequence(EMV2!ErrorPropagation) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllIncomingErrorPropagations', Sequence{self}
	);

helper context AADL2!Classifier def: errorPropagations: Sequence(EMV2!ErrorPropagation) =
	self.incomingErrorPropagations -> including(self.outgoingErrorPropagations) -> flatten();

helper context AADL2!Classifier def: usedTypes(): Sequence(EMV2!ErrorModelLibrary) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getErrorModelSubclauseWithUseTypes', Sequence{self}
	);

helper context AADL2!Classifier def: errorEvents(): Collection(EMV2!ErrorBehaviorEvent) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllErrorBehaviorEvents', Sequence{self}
	);

helper context AADL2!Classifier def: errorStates(): Collection(EMV2!ErrorBehaviorState) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllErrorBehaviorStates', Sequence{self}
	);

helper context AADL2!Classifier def: errorTransitions(): Collection(EMV2!ErrorBehaviorTransition) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllErrorBehaviorTransitions', Sequence{self}
	);

helper context AADL2!Classifier def: compositeStates(): Sequence(EMV2!CompositeState) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllCompositeStates', Sequence{self}
	);

helper context AADL2!Classifier def: outgoingPropagationConditions(): Collection(EMV2!OutgoingPropagationCondition) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllOutgoingPropagationConditions', Sequence{self}
	);

helper context AADL!ComponentInstance def: outProp2propConds: Map(EMV2!ErrorPropagation, Sequence(EMV2!OutgoingPropagationCondition)) =
	let opcs: Sequence(EMV2!OutgoingPropagationCondition) = self.classifier.outgoingPropagationConditions() in
	let byName: Map(String, Sequence(EMV2!OutgoingPropagationCondition)) = 
			opcs -> iterate(opc; acc: Map(String, Sequence(EMV2!OutgoingPropagationCondition)) = Map{} |
				let key: String = opc.outgoing.printName in
				let val: Sequence(EMV2!OutgoingPropagationCondition) = acc.get(key) in
				acc.including(key,
					if val.oclIsUndefined() then
						Sequence{opc}
					else
						val -> append(opc)
					endif
				)
			) in
	opcs->iterate(opc; acc : Map(EMV2!ErrorPropagation, Sequence(EMV2!OutgoingPropagationCondition)) = Map{} |
    if acc.getKeys()->collect(ep | ep.printName)->includes(opc.outgoing.printName) then
			acc
		else
			acc->including(opc.outgoing, byName.get(opc.outgoing.printName))
		endif
  );

--- Get the name of an error propagation for printing
helper context EMV2!ErrorPropagation def: printName: String =
	if self.kind.oclIsUndefined() then
		self.featureorPPRef.featureorPP.getQualifiedName()
	else
		self.kind
	endif;

--- If an error propagation is overridden, find the one closest w.r.t to inheritance to this component
helper context AADL!ComponentInstance def: localPropagation(prop: EMV2!ErrorPropagation): EMV2!ErrorPropagation =
	-- depends on error propagation list being ordered!
	self.classifier.errorPropagations
			-> select(oep |
				if prop.kind.oclIsUndefined() and oep.kind.oclIsUndefined() then
					oep.featureorPPRef.featureorPP.getName().equalsIgnoreCase(prop.featureorPPRef.featureorPP.getName())
				else
					if not prop.kind.oclIsUndefined() and not oep.kind.oclIsUndefined() then
						oep.kind.equalsIgnoreCase(prop.kind)
					else
						false
					endif
				endif
			) -> at(1);

helper context AADL!ComponentInstance def: occurrenceDistribution(event:EMV2!ErrorBehaviorEvent): TupleType(name: String, lambda: Real) =
	let pas: Sequence(EMV2!EMV2PropertyAssociation) = 
			"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Properties".refInvokeStaticOperation(
				'getOccurrenceDistributionProperty', Sequence{self, event, OclUndefined}
			) in
	if pas->isEmpty() then
		Tuple{name = '', lambda = 0.0}
 	else
 		let pa: EMV2!EMV2PropertyAssociation = pas->at(1) in
		Tuple{name = pa.occurrenceName(), lambda = pa.occurrenceValue()}
 	endif;

helper context EMV2!EMV2PropertyAssociation def: occurrenceName(): String =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Properties".refInvokeStaticOperation(
		'getOccurrenceType', Sequence{self}
	);
	
helper context EMV2!EMV2PropertyAssociation def: occurrenceValue(): Real =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Properties".refInvokeStaticOperation(
		'getOccurrenceValue', Sequence{self}
	);
	
helper context EMV2!ErrorPropagation def: name(): String =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getPropagationName', Sequence{self}
	);

helper context AADL2!NamedElement def: name(): String =
	self.getName();

helper context AADL2!Element def: containingClassifier(): AADL2!ComponentClassifier =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAssociatedClassifier', Sequence{self}
	);
	
--- Get the leaf error tokens associated with an error propagation
helper context EMV2!ErrorPropagation def: leafTokens(): Sequence(EMV2!TypeToken) =
	let usedTypes: Sequence(EMV2!ErrorModelLibrary) = self.containingClassifier().usedTypes() in
	self.typeSet.leafTypeTokens(usedTypes);

helper context EMV2!TypeToken def: name() : String =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getName', Sequence{self}
	);
	
helper context EMV2!TypeSet def: leafTypeTokens(useTypes: Sequence(EMV2!ErrorModelLibrary)): Sequence(EMV2!TypeToken) =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EM2TypeSetUtil".refInvokeStaticOperation(
		'generateAllLeafTypeTokens', Sequence{self, useTypes}
	);

helper context EMV2!ConditionExpression def: conditionElements: EMV2!ErrorPropagation =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getAllConditionElementsFromConditionExpression', Sequence{self}
	);

helper context EMV2!ConditionElement def: getErrorPropagation(): EMV2!ErrorPropagation =
	let ne: AADL2!NamedElement = self.namedElement in
	if ne.oclIsTypeOf(EMV2!ErrorPropagation) then
		ne
	else
		OclUndefined
	endif;

helper context EMV2!ConditionElement def: getErrorEvent(): EMV2!ErrorEvent =
	let ne: AADL2!NamedElement = self.namedElement in
	if ne.oclIsTypeOf(EMV2!ErrorEvent) then
		ne
	else
		OclUndefined
	endif;

helper context EMV2!ConditionElement def: namedElement: AADL2!NamedElement =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getErrorModelElement', Sequence{self}
	);

helper context EMV2!ConditionElement def: isNoErrorCondition(): Boolean =
	if self.constraint.oclIsUndefined() then
		false
	else
		let tokens: Sequence(EMV2!TypeToken) = self.constraint.typeTokens in
		not tokens->isEmpty() and tokens->at(1).noError
	endif;

helper context EMV2!ConditionElement def: leafTokens(): Sequence(EMV2!TypeToken) =
	let usedTypes: Sequence(EMV2!ErrorModelLibrary) = self.containingClassifier().usedTypes() in
	let types: EMV2!TypeSet = self.constraint in
	if types.oclIsUndefined() then
		Sequence{}
	else
		types.leafTypeTokens(usedTypes)
	endif;

helper context EMV2!OutgoingPropagationCondition def: leafTokens(): Sequence(EMV2!TypeToken) =
	let usedTypes: Sequence(EMV2!ErrorModelLibrary) = self.containingClassifier().usedTypes() in
	let types: EMV2!TypeSet = self.typeToken in
	if types.oclIsUndefined() then
		Sequence{}
	else
		types.leafTypeTokens(usedTypes)
	endif;
	
helper context EMV2!EMV2Path def: errorPropagation: EMV2!ErrorPropagation =
	"#native"!"org::osate::xtext::aadl2::errormodel::util::EMV2Util".refInvokeStaticOperation(
		'getErrorPropagation', Sequence{self}
	);

helper def: analysisModel: "#native"!"org::osate::xtext::aadl2::errormodel::util::AnalysisModel" =
	let si: AADL!SystemInstance = AADL!SystemInstance.allInstances() -> asSequence() -> first() in
		"#native"!"org::osate::xtext::aadl2::errormodel::util::AnalysisModel".refInvokeStaticOperation(
			'createAnalysisModel', Sequence{si});

-- Component instances that should be processed (based on leaf components wrt error model)
helper def: componentsToProcess: OrderedSet(AADL!ComponentInstance) =
	let initial: Sequence(AADL!ComponentInstance) = thisModule.allComponentsWithEM in
	initial -> iterate(ci; acc: OrderedSet(AADL!ComponentInstance) = initial.asOrderedSet() |
		thisModule.collectParents(ci, acc)
	);

helper def: collectParents(ci: AADL!ComponentInstance, acc: OrderedSet(AADL!ComponentInstance)): OrderedSet(AADL!ComponentInstance) =
	let parent: AADL!ComponentInstance = ci.eContainer() in
	if parent.oclIsUndefined() or acc -> contains(parent) then
		acc
	else
		thisModule.collectParents(parent, acc -> including(parent))
	endif;

helper def: emLeafComponents: Sequence(AADL!ComponentInstance) = 
	thisModule.analysisModel.getSubcomponents();

helper def: allComponentsWithEM: Sequence(AADL!ComponentInstance) =
	thisModule.systemInstance.getAllComponentInstances() -> select(ci | ci.classifier.hasAnnex('emv2')).debug();
	
helper context AADL2!Classifier def: hasAnnex(name: String): Boolean =
	let extended: Sequence(AADL2!Classifier) = self.getSelfPlusAllExtended() in
	let lookup: Sequence(AADL2!Classifier) = 
		if self.oclIsKindOf(AADL2!ComponentImplementation) then
			extended -> append(self.getType().getSelfPlusAllExtended()) -> flatten()
		else
			extended
		endif
	in
	lookup -> exists(cl |
		cl.ownedAnnexSubclause -> exists(sc | sc.name.equalsIgnoreCase(name))
	);

helper def: propagationPaths: Sequence("#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord") =
	thisModule.analysisModel.getPropagationPaths();

-- How to split propagation destinations based on fan-in
helper def: dst2paths: Map(TupleType(io: AADL!ComponentInstance, prop: EMV2!ErrorPropagation), Sequence("#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord")) =
	thisModule.propagationPaths -> iterate(p; acc: Map(TupleType(io: AADL!ComponentInstance, prop: EMV2!ErrorPropagation), Sequence("#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord")) = Map{} |
		let key: TupleType(io: AADL!ComponentInstance, prop: EMV2!ErrorPropagation) =
			let d: OclAny = p.getPathDst() in 
			Tuple{io = d.getComponentInstance(), prop = d.getErrorPropagation()}
		in
		let val: Sequence("#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord") = acc.get(key) in
		acc.including(key,
			if val.oclIsUndefined() then
				Sequence{p}
			else
				val -> including(p)
			endif
		)
	);

helper def: printdst2paths(): String =
	thisModule.dst2paths->getKeys()->collect(k | ('(' + k.io.getInstanceObjectPath() 
		+ ', ' + k.prop.getFeatureorPPRef().getFeatureorPP().getQualifiedName() + ' ' + k.prop.hashCode().toString() + ')').debug())
		;

-- Where to put assertions
helper def: ci2paths: Map(AADL!ComponentInstance, Sequence("#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord")) =
	thisModule.propagationPaths -> iterate(p; acc: Map(AADL!ComponentInstance, Sequence("#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord")) = Map{} |
		let key: AADL!ComponentInstance = p.assertionContainer in
		let val: Sequence("#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord") = acc.get(key) in
		acc.including(key,
			if val.oclIsUndefined() then
				Sequence{p}
			else
				val -> including(p)
			endif
		)
	);


helper context "#native"!"org::osate::xtext::aadl2::errormodel::util::PropagationPathRecord" def: assertionContainer: AADL!ComponentInstance =
	if self.isConnectionPath() then
		self.getConnectionInstance().eContainer()
	else
		thisModule.systemInstance
	endif;
	
helper def: systemInstance: AADL!SystemInstance = AADL!SystemInstance.allInstances() -> first();

-- Force evaluation of a lazy collection by getting its size
helper context Collection(OclAny) def: force(): Collection(OclAny) =
	let i: Integer = self.size() in self;

helper context Sequence(OclAny) def: tail(): Sequence(OclAny) =
	self.subSequence(2, self -> size());

--- Remove all elements of a sequence from this sequence
helper context Sequence(OclAny) def: removeAll(toRemove: Sequence(OclAny)): Sequence(OclAny) =
	if toRemove.isEmpty() then
		self
	else
		self->excluding(toRemove->first())->removeAll(toRemove->tail())
	endif;

-- for error reporting
helper context AADL!Element def: uri(): String =
	"#native"!"org::eclipse::emf::ecore::util::EcoreUtil".refInvokeStaticOperation(
		'getURI', Sequence{self}
	).toString();

-- Replace invalid characters in identifier with '_'
helper context String def: normalizeId(): String =
	self.replaceAll('[:.]', '_');

helper context String def: quoted(): String =
	'"' + self + '"';

helper context AADL2!NamedElement def: indexedName(index: Integer): String =
	self.altaRicaName() + '_' + index.toString();

helper context AADL2!NamedElement def: altaRicaName(): String =
	self.name().normalizeId();

helper context EMV2!ErrorPropagation def: altaRicaName(): String =
	let ref: EMV2!FeatureorPPReference = self.featureorPPRef in
	if ref.oclIsUndefined() then
		super.altaRicaName()
	else
		ref.altaRicaName()
	endif;

helper context EMV2!FeatureorPPReference def: altaRicaName(): String =
	let name: String = self.featureorPP.name in
	if self.next.oclIsUndefined() then 
		name
	else
		name + '_' + self.next.altaRicaName()
	endif;

helper def: int: AR!BaseTypeEnum = #"Integer";
