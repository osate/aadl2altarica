/**
 * AADL to AltaRica Translator
 * 
 * Copyright 2016 Carnegie Mellon University. All Rights Reserved.
 * 
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE
 * MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO
 * WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON
 * UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM
 * PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 * 
 *  Released under a Eclipse Public License - v1.0-style license,
 *  please see license.txt or contact permission@sei.cmu.edu for full terms.
 * 
 * DM16-0114
 */
grammar org.osate.altarica.Altarica with org.eclipse.xtext.common.Terminals

generate altarica "http://osate.org/Altarica/2.1"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	declarations+=AbstractDeclaration*;

AbstractDeclaration:
	Domain | Class;

// Domains ===============================================================

Domain returns NamedElement:
	{Domain}
	'domain' name=ID '{' ( constants+=SymbolicConstant (',' constants+=SymbolicConstant)* )? '}';

SymbolicConstant returns NamedElement:
	{SymbolicConstant} name=ID;

Type:
	=>BaseType | NamedType
;

BaseType:
	name=BaseTypeEnum;

enum BaseTypeEnum:
	INTEGER='Integer' | BOOLEAN='Boolean';

NamedType:
	ref=[NamedElement|ID]
;

// Classes ===============================================================

Class returns NamedElement:
	{Node}
	'class' name=ID
		declarations+=Declaration*
		(
		  'transition'
		  transitions+=LabeledTransition+
		)?
		(
		  'assertion'
		  assertions+=Instruction+
		)?
	'end'
;

// Declarations ==========================================================

Declaration:
	VariableDeclaration | EventDeclaration | ParameterDeclaration | ObserverDeclaration
;


VariableDeclaration returns NamedElement:
	{Variable}
	type=Type name=ID 
	( '(' attributes+=Attribute (',' attributes+=Attribute)* ')' )?
	';'
;
	
Attribute returns NamedElement:
	{Attribute}
	name=ID "=" value=Expression
;
	

EventDeclaration returns NamedElement:
	{Event}
	'event' name=ID	
	( '(' attributes+=Attribute (',' attributes+=Attribute)* ')' )?
	';'
;


ParameterDeclaration returns NamedElement:
	{Parameter}
	'parameter' type=Type name=ID '=' value=Expression
	';'
;


ObserverDeclaration returns NamedElement:
	{Observer}
	'observer' type=Type name=ID '=' value=Expression
	';'
;

// Transitions ===========================================================

LabeledTransition:
	event=NameRef ":" expression=TransitionAnd
;

TransitionAnd returns TransitionExpression:
	TransitionOr ({TransitionAnd.left=current} '&' right=TransitionOr)*;

TransitionOr returns TransitionExpression:
	Transition ({TransitionOr.left=current} '|' right=Transition)*;

Transition returns TransitionExpression:
	{Transition} guard=Expression '->' action=Instruction
;

// Instructions

Instruction:
	Skip | Assignment | Block | Conditional | Switch
;

Skip returns Instruction:
	{Skip} 
	'skip' ';'
;

Assignment returns Instruction:
	{Assignment}
	variable=NameRef ':=' value=Expression ';'
;

Block returns Instruction:
	{Block}
	'{' (instructions+=Instruction)+ '}'
;

Conditional returns Instruction:
	{Conditional}
	'if' condition=Expression 'then' then=Instruction (=>'else' else=Instruction)? ";"
;

Switch returns Instruction:
	'switch' '{' 
		cases+=CaseExpression*
	'else' ':'
		else=Expression
	'}';

// Expressions ===========================================================

Expression:
	LogicalOr
;
	
LogicalOr returns Expression:
	LogicalAnd =>({LogicalOr.left=current} op='or' right=LogicalAnd)*
;

LogicalAnd returns Expression:
	Relation =>({LogicalAnd.left=current} op='and' right=Relation)*
;

Relation returns Expression:
	Addition =>({Equal.left=current} op=('=='|'!=' | '<' | '<=' | '>=' | '>') right=Addition)*
;

Addition returns Expression:
	Multiplication =>({Addition.left=current} op=('+' | '-') right=Multiplication)*
;

Multiplication returns Expression:
	Neg =>({Multiplication.left=current} op=('*' | '/') right=Neg)*
;

Neg returns Expression:
	{Not} =>'not' expression=Atom
	| {Minus} =>'-' expression=Atom 
	| Atom
;

Atom returns Expression:
	BooleanLiteral | StringLiteral | NumberLiteral | FunctionCall | NameRef | SwitchExpression | '(' Expression ')'
;

BooleanLiteral returns ARBoolean:
	value=('true' | 'false');

StringLiteral returns ARString:
	value=STRING;

NumberLiteral returns ARNumber:
	value=NUMBER;

NameRef:
	variable=[NamedElement] =>({NameRef.nested=current} '.' variable=[NamedElement])*;

SwitchExpression:
	'switch' '{' 
		cases+=CaseExpression*
	'default' ':'
		default=Expression
	'}';

CaseExpression:
	'case' condition=LogicalOr ':' case=Expression
;

FunctionCall returns Expression:
	{FunctionCall}
	name=('exponential' | 'Dirac' | 'constant') 
	'(' (parameters+=Expression (',' parameters+=Expression)*)? ')'
;

// Terminals =============================================================

terminal fragment ALPHA: 'a'..'z'|'A'..'Z';

terminal fragment DIGIT: '0'..'9';

terminal fragment REGULAR_ID: (ALPHA|'_')(ALPHA |'_'| DIGIT)*;

terminal fragment STRING_ID: "'" (
		ALPHA | DIGIT | '!' | '#' | '$'  | '%' | '&' | '(' | ')' | '*' | '+' | ',' | '-' 
		| '.' | '/' | ':' | ';' | '<' | '>' | '=' | '?' | '@' | '[' | ']' | '^' | '{' | '}' | '|' | '~' | '_'
	)*  "'";

terminal ID:
	REGULAR_ID | STRING_ID;

terminal STRING: 
	'"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* '"';
	
terminal NUMBER returns ecore::EDouble:
	DIGIT+ ('.' DIGIT+)? (('e' | 'E') ('+' | '-')? DIGIT+)?;
	
terminal INT returns ecore::EInt: '_@_this has been deactivated_';

