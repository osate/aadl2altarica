/*
 * generated by Xtext
 */
package org.osate.altarica.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.osate.altarica.altarica.Attribute
import org.osate.altarica.altarica.Domain
import org.osate.altarica.altarica.NameRef
import org.osate.altarica.altarica.NamedType
import org.osate.altarica.altarica.Node
import org.osate.altarica.altarica.Variable

import static extension org.eclipse.xtext.EcoreUtil2.getContainerOfType

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class AltaricaScopeProvider extends AbstractDeclarativeScopeProvider {
	def scope_NameRef_variable(NameRef context, EReference reference) {
		if (context.eContainer instanceof Attribute) {
			val variable = context.getContainerOfType(Variable)
			val type = variable.type as NamedType
			val domain = type.ref as Domain
			Scopes.scopeFor(domain.constants)
		} else {
			val nested = context.nested
			if (nested == null) {
				Scopes.scopeFor(context.getContainerOfType(Node).declarations)
			} else {
				val variable = nested.variable
				switch (variable) {
					Variable: {
						val type = variable.type
						switch (type) {
							NamedType: {
								val ref = type.ref
								if (ref instanceof Node) {
									Scopes.scopeFor(ref.declarations)
								}
							}
							default: IScope.NULLSCOPE
						}
					}
					default: IScope.NULLSCOPE
				}
			}
		}
	}
}
