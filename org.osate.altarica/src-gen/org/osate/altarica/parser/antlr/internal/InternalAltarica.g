/*
 * generated by Xtext
 */
grammar InternalAltarica;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.osate.altarica.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.osate.altarica.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.altarica.services.AltaricaGrammarAccess;

}

@parser::members {

 	private AltaricaGrammarAccess grammarAccess;
 	
    public InternalAltaricaParser(TokenStream input, AltaricaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "System";	
   	}
   	
   	@Override
   	protected AltaricaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getOwnedDeclarationsAbstractDeclarationParserRuleCall_0()); 
	    }
		lv_ownedDeclarations_0_0=ruleAbstractDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"ownedDeclarations",
        		lv_ownedDeclarations_0_0, 
        		"AbstractDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleAbstractDeclaration
entryRuleAbstractDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDeclarationRule()); }
	 iv_ruleAbstractDeclaration=ruleAbstractDeclaration 
	 { $current=$iv_ruleAbstractDeclaration.current; } 
	 EOF 
;

// Rule AbstractDeclaration
ruleAbstractDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractDeclarationAccess().getDomainParserRuleCall_0()); 
    }
    this_Domain_0=ruleDomain
    { 
        $current = $this_Domain_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDeclarationAccess().getConstantDefinitionParserRuleCall_1()); 
    }
    this_ConstantDefinition_1=ruleConstantDefinition
    { 
        $current = $this_ConstantDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDeclarationAccess().getNodeParserRuleCall_2()); 
    }
    this_Node_2=ruleNode
    { 
        $current = $this_Node_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	 iv_ruleConstantDefinition=ruleConstantDefinition 
	 { $current=$iv_ruleConstantDefinition.current; } 
	 EOF 
;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantDefinitionAccess().getConstantDefinitionAction_0(),
            $current);
    }
)	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantDefinitionAccess().getConstKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConstantDefinitionAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDefinitionAccess().getExpressionAbstractDefinitionConstantParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleAbstractDefinitionConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"AbstractDefinitionConstant");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantDefinitionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAbstractDefinitionConstant
entryRuleAbstractDefinitionConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDefinitionConstantRule()); }
	 iv_ruleAbstractDefinitionConstant=ruleAbstractDefinitionConstant 
	 { $current=$iv_ruleAbstractDefinitionConstant.current; } 
	 EOF 
;

// Rule AbstractDefinitionConstant
ruleAbstractDefinitionConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractDefinitionConstantAccess().getExpressionConstantParserRuleCall_0()); 
    }
    this_ExpressionConstant_0=ruleExpressionConstant
    { 
        $current = $this_ExpressionConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDefinitionConstantAccess().getDomainConstantParserRuleCall_1()); 
    }
    this_DomainConstant_1=ruleDomainConstant
    { 
        $current = $this_DomainConstant_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpressionConstant
entryRuleExpressionConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionConstantRule()); }
	 iv_ruleExpressionConstant=ruleExpressionConstant 
	 { $current=$iv_ruleExpressionConstant.current; } 
	 EOF 
;

// Rule ExpressionConstant
ruleExpressionConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionConstantAccess().getEqualsSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionConstantAccess().getOwnedExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_ownedExpression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionConstantRule());
	        }
       		set(
       			$current, 
       			"ownedExpression",
        		lv_ownedExpression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDomainConstant
entryRuleDomainConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainConstantRule()); }
	 iv_ruleDomainConstant=ruleDomainConstant 
	 { $current=$iv_ruleDomainConstant.current; } 
	 EOF 
;

// Rule DomainConstant
ruleDomainConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=':' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDomainConstantAccess().getColonKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainConstantAccess().getDomainAbstractDomainParserRuleCall_1_0()); 
	    }
		lv_domain_1_0=ruleAbstractDomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainConstantRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_1_0, 
        		"AbstractDomain");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDomainConstantAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainConstantAccess().getOwnedExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_ownedExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainConstantRule());
	        }
       		set(
       			$current, 
       			"ownedExpression",
        		lv_ownedExpression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDomain
entryRuleDomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainRule()); }
	 iv_ruleDomain=ruleDomain 
	 { $current=$iv_ruleDomain.current; } 
	 EOF 
;

// Rule Domain
ruleDomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDomainAccess().getDomainAction_0(),
            $current);
    }
)	otherlv_1='domain' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDomainAccess().getDomainKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getDomainAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDomainAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainAccess().getDomainAbstractDomainParserRuleCall_4_0()); 
	    }
		lv_domain_4_0=ruleAbstractDomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_4_0, 
        		"AbstractDomain");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDomainAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleAbstractDomain
entryRuleAbstractDomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDomainRule()); }
	 iv_ruleAbstractDomain=ruleAbstractDomain 
	 { $current=$iv_ruleAbstractDomain.current; } 
	 EOF 
;

// Rule AbstractDomain
ruleAbstractDomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractDomainAccess().getPrimitiveTypeParserRuleCall_0()); 
    }
    this_PrimitiveType_0=rulePrimitiveType
    { 
        $current = $this_PrimitiveType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDomainAccess().getRangeParserRuleCall_1()); 
    }
    this_Range_1=ruleRange
    { 
        $current = $this_Range_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractDomainAccess().getEnumerationParserRuleCall_2()); 
    }
    this_Enumeration_2=ruleEnumeration
    { 
        $current = $this_Enumeration_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getLowerAtomParserRuleCall_1_0()); 
	    }
		lv_lower_1_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"lower",
        		lv_lower_1_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getUpperAtomParserRuleCall_3_0()); 
	    }
		lv_upper_3_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"upper",
        		lv_upper_3_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	 iv_ruleEnumeration=ruleEnumeration 
	 { $current=$iv_ruleEnumeration.current; } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationAccess().getOwnedLiteralsLiteralParserRuleCall_1_0()); 
	    }
		lv_ownedLiterals_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationRule());
	        }
       		add(
       			$current, 
       			"ownedLiterals",
        		lv_ownedLiterals_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumerationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationAccess().getOwnedLiteralsLiteralParserRuleCall_2_1_0()); 
	    }
		lv_ownedLiterals_3_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationRule());
	        }
       		add(
       			$current, 
       			"ownedLiterals",
        		lv_ownedLiterals_3_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulePrimitiveType
entryRulePrimitiveType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveTypeRule()); }
	 iv_rulePrimitiveType=rulePrimitiveType 
	 { $current=$iv_rulePrimitiveType.current; } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveTypeAccess().getNamePrimitiveTypeKindEnumRuleCall_0()); 
	    }
		lv_name_0_0=rulePrimitiveTypeKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"PrimitiveTypeKind");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralAccess().getEnumerationLiteralAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLiteralAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNodeAccess().getNodeAction_0(),
            $current);
    }
)	otherlv_1='node' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodeAccess().getNodeKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getOwnedSpecificationsAbstractSpecificationParserRuleCall_3_0()); 
	    }
		lv_ownedSpecifications_3_0=ruleAbstractSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		add(
       			$current, 
       			"ownedSpecifications",
        		lv_ownedSpecifications_3_0, 
        		"AbstractSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='edon' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeAccess().getEdonKeyword_4());
    }
)
;





// Entry rule entryRuleAbstractSpecification
entryRuleAbstractSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractSpecificationRule()); }
	 iv_ruleAbstractSpecification=ruleAbstractSpecification 
	 { $current=$iv_ruleAbstractSpecification.current; } 
	 EOF 
;

// Rule AbstractSpecification
ruleAbstractSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getFlowSpecificationParserRuleCall_0()); 
    }
    this_FlowSpecification_0=ruleFlowSpecification
    { 
        $current = $this_FlowSpecification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getStateSpecificationParserRuleCall_1()); 
    }
    this_StateSpecification_1=ruleStateSpecification
    { 
        $current = $this_StateSpecification_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getEventSpecificationParserRuleCall_2()); 
    }
    this_EventSpecification_2=ruleEventSpecification
    { 
        $current = $this_EventSpecification_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getNodeInstanceSpecificationParserRuleCall_3()); 
    }
    this_NodeInstanceSpecification_3=ruleNodeInstanceSpecification
    { 
        $current = $this_NodeInstanceSpecification_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getAssertSpecificationParserRuleCall_4()); 
    }
    this_AssertSpecification_4=ruleAssertSpecification
    { 
        $current = $this_AssertSpecification_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getVectorSpecificationParserRuleCall_5()); 
    }
    this_VectorSpecification_5=ruleVectorSpecification
    { 
        $current = $this_VectorSpecification_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getTransitionSpecificationParserRuleCall_6()); 
    }
    this_TransitionSpecification_6=ruleTransitionSpecification
    { 
        $current = $this_TransitionSpecification_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getInitSpecificationParserRuleCall_7()); 
    }
    this_InitSpecification_7=ruleInitSpecification
    { 
        $current = $this_InitSpecification_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractSpecificationAccess().getExternalSpecificationParserRuleCall_8()); 
    }
    this_ExternalSpecification_8=ruleExternalSpecification
    { 
        $current = $this_ExternalSpecification_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableAttribute
entryRuleVariableAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAttributeRule()); }
	 iv_ruleVariableAttribute=ruleVariableAttribute 
	 { $current=$iv_ruleVariableAttribute.current; } 
	 EOF 
;

// Rule VariableAttribute
ruleVariableAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableAttributeAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleInitSpecification
entryRuleInitSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitSpecificationRule()); }
	 iv_ruleInitSpecification=ruleInitSpecification 
	 { $current=$iv_ruleInitSpecification.current; } 
	 EOF 
;

// Rule InitSpecification
ruleInitSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='init' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitSpecificationAccess().getInitKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitSpecificationAccess().getOwnedInitStatementsInitStatementParserRuleCall_1_0()); 
	    }
		lv_ownedInitStatements_1_0=ruleInitStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedInitStatements",
        		lv_ownedInitStatements_1_0, 
        		"InitStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleInitStatement
entryRuleInitStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitStatementRule()); }
	 iv_ruleInitStatement=ruleInitStatement 
	 { $current=$iv_ruleInitStatement.current; } 
	 EOF 
;

// Rule InitStatement
ruleInitStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInitStatementAccess().getAffectationAssignmentParserRuleCall_0_0()); 
	    }
		lv_affectation_0_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitStatementRule());
	        }
       		set(
       			$current, 
       			"affectation",
        		lv_affectation_0_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInitStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleExternalSpecification
entryRuleExternalSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalSpecificationRule()); }
	 iv_ruleExternalSpecification=ruleExternalSpecification 
	 { $current=$iv_ruleExternalSpecification.current; } 
	 EOF 
;

// Rule ExternalSpecification
ruleExternalSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extern' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExternalSpecificationAccess().getExternKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExternalSpecificationAccess().getOwnedDirectivesExternalDirectiveParserRuleCall_1_0()); 
	    }
		lv_ownedDirectives_1_0=ruleExternalDirective		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternalSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedDirectives",
        		lv_ownedDirectives_1_0, 
        		"ExternalDirective");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleExternalDirective
entryRuleExternalDirective returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalDirectiveRule()); }
	 iv_ruleExternalDirective=ruleExternalDirective 
	 { $current=$iv_ruleExternalDirective.current; } 
	 EOF 
;

// Rule ExternalDirective
ruleExternalDirective returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_directive_0_0=RULE_SL_COMMENT
		{
			newLeafNode(lv_directive_0_0, grammarAccess.getExternalDirectiveAccess().getDirectiveSL_COMMENTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExternalDirectiveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"directive",
        		lv_directive_0_0, 
        		"SL_COMMENT");
	    }

)
)
;





// Entry rule entryRuleFlowSpecification
entryRuleFlowSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowSpecificationRule()); }
	 iv_ruleFlowSpecification=ruleFlowSpecification 
	 { $current=$iv_ruleFlowSpecification.current; } 
	 EOF 
;

// Rule FlowSpecification
ruleFlowSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='flow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFlowSpecificationAccess().getFlowKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowSpecificationAccess().getOwnedFlowsFlowParserRuleCall_1_0()); 
	    }
		lv_ownedFlows_1_0=ruleFlow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedFlows",
        		lv_ownedFlows_1_0, 
        		"Flow");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFlow
entryRuleFlow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlowRule()); }
	 iv_ruleFlow=ruleFlow 
	 { $current=$iv_ruleFlow.current; } 
	 EOF 
;

// Rule Flow
ruleFlow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFlowAccess().getFlowAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFlowAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFlowRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFlowAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowAccess().getDomainAbstractTypeRefParserRuleCall_3_0()); 
	    }
		lv_domain_3_0=ruleAbstractTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_3_0, 
        		"AbstractTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFlowAccess().getColonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowAccess().getKindFlowKindEnumRuleCall_4_1_0()); 
	    }
		lv_kind_5_0=ruleFlowKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_5_0, 
        		"FlowKind");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFlowAccess().getColonKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlowAccess().getAttributeVariableAttributeParserRuleCall_5_1_0()); 
	    }
		lv_attribute_7_0=ruleVariableAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlowRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_7_0, 
        		"VariableAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFlowAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleEventSpecification
entryRuleEventSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventSpecificationRule()); }
	 iv_ruleEventSpecification=ruleEventSpecification 
	 { $current=$iv_ruleEventSpecification.current; } 
	 EOF 
;

// Rule EventSpecification
ruleEventSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='event' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventSpecificationAccess().getEventKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventSpecificationAccess().getOwnedEventsEventParserRuleCall_1_0()); 
	    }
		lv_ownedEvents_1_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedEvents",
        		lv_ownedEvents_1_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEventAccess().getEventAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getOwnedPriorityPriorityParserRuleCall_2_1_0()); 
	    }
		lv_ownedPriority_3_0=rulePriority		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"ownedPriority",
        		lv_ownedPriority_3_0, 
        		"Priority");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEventAccess().getRightSquareBracketKeyword_2_2());
    }
)?(	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEventAccess().getColonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getAttributeVariableAttributeParserRuleCall_3_1_0()); 
	    }
		lv_attribute_6_0=ruleVariableAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_6_0, 
        		"VariableAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEventAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulePriority
entryRulePriority returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPriorityRule()); }
	 iv_rulePriority=rulePriority 
	 { $current=$iv_rulePriority.current; } 
	 EOF 
;

// Rule Priority
rulePriority returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPriorityAccess().getExclamationMarkKeyword_0_0());
    }

    |	otherlv_1='priority' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPriorityAccess().getPriorityKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPriorityAccess().getOwnedExpressionAbstractExpressionParserRuleCall_1_0()); 
	    }
		lv_ownedExpression_2_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPriorityRule());
	        }
       		set(
       			$current, 
       			"ownedExpression",
        		lv_ownedExpression_2_0, 
        		"AbstractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateSpecification
entryRuleStateSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateSpecificationRule()); }
	 iv_ruleStateSpecification=ruleStateSpecification 
	 { $current=$iv_ruleStateSpecification.current; } 
	 EOF 
;

// Rule StateSpecification
ruleStateSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='state' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateSpecificationAccess().getStateKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateSpecificationAccess().getOwnedStatesStateParserRuleCall_1_0()); 
	    }
		lv_ownedStates_1_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedStates",
        		lv_ownedStates_1_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStateAccess().getStateAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getDomainAbstractTypeRefParserRuleCall_3_0()); 
	    }
		lv_domain_3_0=ruleAbstractTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_3_0, 
        		"AbstractTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateAccess().getColonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getAttributeVariableAttributeParserRuleCall_4_1_0()); 
	    }
		lv_attribute_5_0=ruleVariableAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_5_0, 
        		"VariableAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStateAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleAbstractTypeRef
entryRuleAbstractTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractTypeRefRule()); }
	 iv_ruleAbstractTypeRef=ruleAbstractTypeRef 
	 { $current=$iv_ruleAbstractTypeRef.current; } 
	 EOF 
;

// Rule AbstractTypeRef
ruleAbstractTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractTypeRefAccess().getDomainRefParserRuleCall_0()); 
    }
    this_DomainRef_0=ruleDomainRef
    { 
        $current = $this_DomainRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractTypeRefAccess().getAbstractDomainParserRuleCall_1()); 
    }
    this_AbstractDomain_1=ruleAbstractDomain
    { 
        $current = $this_AbstractDomain_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDomainRef
entryRuleDomainRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainRefRule()); }
	 iv_ruleDomainRef=ruleDomainRef 
	 { $current=$iv_ruleDomainRef.current; } 
	 EOF 
;

// Rule DomainRef
ruleDomainRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDomainRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getDomainRefAccess().getReferenceDomainCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleNodeInstanceSpecification
entryRuleNodeInstanceSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeInstanceSpecificationRule()); }
	 iv_ruleNodeInstanceSpecification=ruleNodeInstanceSpecification 
	 { $current=$iv_ruleNodeInstanceSpecification.current; } 
	 EOF 
;

// Rule NodeInstanceSpecification
ruleNodeInstanceSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sub' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeInstanceSpecificationAccess().getSubKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeInstanceSpecificationAccess().getOwnedNodeInstancesNodeInstanceParserRuleCall_1_0()); 
	    }
		lv_ownedNodeInstances_1_0=ruleNodeInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeInstanceSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedNodeInstances",
        		lv_ownedNodeInstances_1_0, 
        		"NodeInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleNodeInstance
entryRuleNodeInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeInstanceRule()); }
	 iv_ruleNodeInstance=ruleNodeInstance 
	 { $current=$iv_ruleNodeInstance.current; } 
	 EOF 
;

// Rule NodeInstance
ruleNodeInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNodeInstanceAccess().getNodeInstanceAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeInstanceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeInstanceAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeInstanceRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getNodeInstanceAccess().getNodeTypeNodeCrossReference_3_0()); 
	}

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeInstanceAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAssertSpecification
entryRuleAssertSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertSpecificationRule()); }
	 iv_ruleAssertSpecification=ruleAssertSpecification 
	 { $current=$iv_ruleAssertSpecification.current; } 
	 EOF 
;

// Rule AssertSpecification
ruleAssertSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssertSpecificationAccess().getAssertKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertSpecificationAccess().getOwnedAssertsAssertParserRuleCall_1_0()); 
	    }
		lv_ownedAsserts_1_0=ruleAssert		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedAsserts",
        		lv_ownedAsserts_1_0, 
        		"Assert");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAssert
entryRuleAssert returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssertRule()); }
	 iv_ruleAssert=ruleAssert 
	 { $current=$iv_ruleAssert.current; } 
	 EOF 
;

// Rule Assert
ruleAssert returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssertAccess().getOwnedExpressionsAbstractBooleanExpressionParserRuleCall_0_0()); 
	    }
		lv_ownedExpressions_0_0=ruleAbstractBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertRule());
	        }
       		add(
       			$current, 
       			"ownedExpressions",
        		lv_ownedExpressions_0_0, 
        		"AbstractBooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssertAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleVectorSpecification
entryRuleVectorSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorSpecificationRule()); }
	 iv_ruleVectorSpecification=ruleVectorSpecification 
	 { $current=$iv_ruleVectorSpecification.current; } 
	 EOF 
;

// Rule VectorSpecification
ruleVectorSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sync' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVectorSpecificationAccess().getSyncKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorSpecificationAccess().getOwnedVectorsVectorParserRuleCall_1_0()); 
	    }
		lv_ownedVectors_1_0=ruleVector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedVectors",
        		lv_ownedVectors_1_0, 
        		"Vector");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleVector
entryRuleVector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorRule()); }
	 iv_ruleVector=ruleVector 
	 { $current=$iv_ruleVector.current; } 
	 EOF 
;

// Rule Vector
ruleVector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVectorAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getOwnedParametersVectorParameterParserRuleCall_1_0()); 
	    }
		lv_ownedParameters_1_0=ruleVectorParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		add(
       			$current, 
       			"ownedParameters",
        		lv_ownedParameters_1_0, 
        		"VectorParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVectorAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getOwnedParametersVectorParameterParserRuleCall_2_1_0()); 
	    }
		lv_ownedParameters_3_0=ruleVectorParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		add(
       			$current, 
       			"ownedParameters",
        		lv_ownedParameters_3_0, 
        		"VectorParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVectorAccess().getGreaterThanSignKeyword_3());
    }
(	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVectorAccess().getLeftSquareBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVectorAccess().getCardinalityCardinalityParserRuleCall_4_1_0()); 
	    }
		lv_cardinality_6_0=ruleCardinality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorRule());
	        }
       		set(
       			$current, 
       			"cardinality",
        		lv_cardinality_6_0, 
        		"Cardinality");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getVectorAccess().getRightSquareBracketKeyword_4_2());
    }
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVectorAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleVectorParameter
entryRuleVectorParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVectorParameterRule()); }
	 iv_ruleVectorParameter=ruleVectorParameter 
	 { $current=$iv_ruleVectorParameter.current; } 
	 EOF 
;

// Rule VectorParameter
ruleVectorParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVectorParameterAccess().getEventParameterEventRefParserRuleCall_0_0()); 
	    }
		lv_eventParameter_0_0=ruleEventRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVectorParameterRule());
	        }
       		set(
       			$current, 
       			"eventParameter",
        		lv_eventParameter_0_0, 
        		"EventRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isRequired_1_0=	'?' 
    {
        newLeafNode(lv_isRequired_1_0, grammarAccess.getVectorParameterAccess().getIsRequiredQuestionMarkKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVectorParameterRule());
	        }
       		setWithLastConsumed($current, "isRequired", true, "?");
	    }

)
)?)
;





// Entry rule entryRuleCardinality
entryRuleCardinality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCardinalityRule()); }
	 iv_ruleCardinality=ruleCardinality 
	 { $current=$iv_ruleCardinality.current; } 
	 EOF 
;

// Rule Cardinality
ruleCardinality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCardinalityAccess().getGreaterThanSignKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expression_1_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"AbstractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='>=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCardinalityAccess().getGreaterThanSignEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_3_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"AbstractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCardinalityAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityAccess().getExpressionAbstractExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expression_5_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"AbstractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTransitionSpecification
entryRuleTransitionSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionSpecificationRule()); }
	 iv_ruleTransitionSpecification=ruleTransitionSpecification 
	 { $current=$iv_ruleTransitionSpecification.current; } 
	 EOF 
;

// Rule TransitionSpecification
ruleTransitionSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='trans' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionSpecificationAccess().getTransKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionSpecificationAccess().getOwnedTransitionTransitionsTransitionParserRuleCall_1_0()); 
	    }
		lv_ownedTransitionTransitions_1_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionSpecificationRule());
	        }
       		add(
       			$current, 
       			"ownedTransitionTransitions",
        		lv_ownedTransitionTransitions_1_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getOwnedExpressionAbstractExpressionParserRuleCall_0_0()); 
	    }
		lv_ownedExpression_0_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"ownedExpression",
        		lv_ownedExpression_0_0, 
        		"AbstractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='|-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getVerticalLineHyphenMinusKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getEventEventCrossReference_2_0()); 
	}

)
)	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getOwnedAffectationsAssignmentParserRuleCall_4_0_0()); 
	    }
		lv_ownedAffectations_4_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"ownedAffectations",
        		lv_ownedAffectations_4_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getOwnedAffectationsAssignmentParserRuleCall_4_1_1_0()); 
	    }
		lv_ownedAffectations_6_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		add(
       			$current, 
       			"ownedAffectations",
        		lv_ownedAffectations_6_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)*	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getStateStateCrossReference_0_0()); 
	}

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getOwnedExpressionAbstractExpressionParserRuleCall_2_0()); 
	    }
		lv_ownedExpression_2_0=ruleAbstractExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"ownedExpression",
        		lv_ownedExpression_2_0, 
        		"AbstractExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAbstractExpression
entryRuleAbstractExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractExpressionRule()); }
	 iv_ruleAbstractExpression=ruleAbstractExpression 
	 { $current=$iv_ruleAbstractExpression.current; } 
	 EOF 
;

// Rule AbstractExpression
ruleAbstractExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractExpressionAccess().getIfThenElseParserRuleCall_0()); 
    }
    this_IfThenElse_0=ruleIfThenElse
    { 
        $current = $this_IfThenElse_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractExpressionAccess().getSwitchParserRuleCall_1()); 
    }
    this_Switch_1=ruleSwitch
    { 
        $current = $this_Switch_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractExpressionAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAbstractBooleanExpression
entryRuleAbstractBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractBooleanExpressionRule()); }
	 iv_ruleAbstractBooleanExpression=ruleAbstractBooleanExpression 
	 { $current=$iv_ruleAbstractBooleanExpression.current; } 
	 EOF 
;

// Rule AbstractBooleanExpression
ruleAbstractBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractBooleanExpressionAccess().getIfThenElseParserRuleCall_0()); 
    }
    this_IfThenElse_0=ruleIfThenElse
    { 
        $current = $this_IfThenElse_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractBooleanExpressionAccess().getSwitchParserRuleCall_1()); 
    }
    this_Switch_1=ruleSwitch
    { 
        $current = $this_Switch_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractBooleanExpressionAccess().getBooleanExpressionParserRuleCall_2()); 
    }
    this_BooleanExpression_2=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSwitch
entryRuleSwitch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchRule()); }
	 iv_ruleSwitch=ruleSwitch 
	 { $current=$iv_ruleSwitch.current; } 
	 EOF 
;

// Rule Switch
ruleSwitch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getOwnedCasesCaseExpressionParserRuleCall_1_0()); 
	    }
		lv_ownedCases_1_0=ruleCaseExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		add(
       			$current, 
       			"ownedCases",
        		lv_ownedCases_1_0, 
        		"CaseExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='else' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSwitchAccess().getElseKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getDefaultExpressionParserRuleCall_3_0()); 
	    }
		lv_default_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCaseExpression
entryRuleCaseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseExpressionRule()); }
	 iv_ruleCaseExpression=ruleCaseExpression 
	 { $current=$iv_ruleCaseExpression.current; } 
	 EOF 
;

// Rule CaseExpression
ruleCaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExpressionAccess().getConditionBooleanExpressionParserRuleCall_0_0()); 
	    }
		lv_condition_0_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_0_0, 
        		"BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaseExpressionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseExpressionAccess().getBodyExpressionParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCaseExpressionAccess().getCommaKeyword_3());
    }
)
;





// Entry rule entryRuleIfThenElse
entryRuleIfThenElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenElseRule()); }
	 iv_ruleIfThenElse=ruleIfThenElse 
	 { $current=$iv_ruleIfThenElse.current; } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfThenElseAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getConditionBooleanExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfThenElseAccess().getThenKeyword_2());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getThenSwitchParserRuleCall_3_0_0()); 
	    }
		lv_then_3_1=ruleSwitch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_1, 
        		"Switch");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getThenExpressionParserRuleCall_3_0_1()); 
	    }
		lv_then_3_2=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_2, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfThenElseAccess().getElseKeyword_4());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getElseSwitchParserRuleCall_5_0_0()); 
	    }
		lv_else_5_1=ruleSwitch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_1, 
        		"Switch");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getElseExpressionParserRuleCall_5_0_1()); 
	    }
		lv_else_5_2=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_2, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getMinusParserRuleCall_0()); 
    }
    this_Minus_0=ruleMinus
    { 
        $current = $this_Minus_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getAdditionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightOperandMinusParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Minus");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMinus
entryRuleMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinusRule()); }
	 iv_ruleMinus=ruleMinus 
	 { $current=$iv_ruleMinus.current; } 
	 EOF 
;

// Rule Minus
ruleMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMinusAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMinusAccess().getMinusLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMinusAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinusAccess().getRightOperandMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinusRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getDivisionParserRuleCall_0()); 
    }
    this_Division_0=ruleDivision
    { 
        $current = $this_Division_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiplicationLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightOperandDivisionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleDivision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Division");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	 iv_ruleDivision=ruleDivision 
	 { $current=$iv_ruleDivision.current; } 
	 EOF 
;

// Rule Division
ruleDivision returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDivisionAccess().getBooleanExpressionParserRuleCall_0()); 
    }
    this_BooleanExpression_0=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDivisionAccess().getDivisionLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDivisionAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivisionAccess().getRightOperandBooleanExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivisionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getAndParserRuleCall()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getOrParserRuleCall_0()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftOperandAction_1_0(),
            $current);
    }
)(	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_1_0());
    }

    |	otherlv_3='&' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAndAccess().getAmpersandKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightOperandOrParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_4_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_4_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getEqualParserRuleCall_0()); 
    }
    this_Equal_0=ruleEqual
    { 
        $current = $this_Equal_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftOperandAction_1_0(),
            $current);
    }
)(	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_1_0());
    }

    |	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOrAccess().getVerticalLineKeyword_1_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightOperandEqualParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_4_0=ruleEqual		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_4_0, 
        		"Equal");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	 iv_ruleEqual=ruleEqual 
	 { $current=$iv_ruleEqual.current; } 
	 EOF 
;

// Rule Equal
ruleEqual returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualAccess().getNotEqualParserRuleCall_0()); 
    }
    this_NotEqual_0=ruleNotEqual
    { 
        $current = $this_NotEqual_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualAccess().getEqualLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEqualAccess().getEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualAccess().getRightOperandNotEqualParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNotEqual		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"NotEqual");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNotEqual
entryRuleNotEqual returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotEqualRule()); }
	 iv_ruleNotEqual=ruleNotEqual 
	 { $current=$iv_ruleNotEqual.current; } 
	 EOF 
;

// Rule NotEqual
ruleNotEqual returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNotEqualAccess().getStrictLowerParserRuleCall_0()); 
    }
    this_StrictLower_0=ruleStrictLower
    { 
        $current = $this_StrictLower_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNotEqualAccess().getNotEqualLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='!=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNotEqualAccess().getExclamationMarkEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNotEqualAccess().getRightOperandStrictLowerParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleStrictLower		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotEqualRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"StrictLower");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleStrictLower
entryRuleStrictLower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrictLowerRule()); }
	 iv_ruleStrictLower=ruleStrictLower 
	 { $current=$iv_ruleStrictLower.current; } 
	 EOF 
;

// Rule StrictLower
ruleStrictLower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStrictLowerAccess().getLowerParserRuleCall_0()); 
    }
    this_Lower_0=ruleLower
    { 
        $current = $this_Lower_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getStrictLowerAccess().getStrictLowerLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStrictLowerAccess().getLessThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStrictLowerAccess().getRightOperandLowerParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleLower		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStrictLowerRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Lower");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLower
entryRuleLower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLowerRule()); }
	 iv_ruleLower=ruleLower 
	 { $current=$iv_ruleLower.current; } 
	 EOF 
;

// Rule Lower
ruleLower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLowerAccess().getStrictUpperParserRuleCall_0()); 
    }
    this_StrictUpper_0=ruleStrictUpper
    { 
        $current = $this_StrictUpper_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLowerAccess().getLowerLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='<=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLowerAccess().getLessThanSignEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLowerAccess().getRightOperandStrictUpperParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleStrictUpper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLowerRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"StrictUpper");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleStrictUpper
entryRuleStrictUpper returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrictUpperRule()); }
	 iv_ruleStrictUpper=ruleStrictUpper 
	 { $current=$iv_ruleStrictUpper.current; } 
	 EOF 
;

// Rule StrictUpper
ruleStrictUpper returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStrictUpperAccess().getUpperParserRuleCall_0()); 
    }
    this_Upper_0=ruleUpper
    { 
        $current = $this_Upper_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getStrictUpperAccess().getStrictUpperLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStrictUpperAccess().getGreaterThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStrictUpperAccess().getRightOperandUpperParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleUpper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStrictUpperRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Upper");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUpper
entryRuleUpper returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpperRule()); }
	 iv_ruleUpper=ruleUpper 
	 { $current=$iv_ruleUpper.current; } 
	 EOF 
;

// Rule Upper
ruleUpper returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUpperAccess().getImplyParserRuleCall_0()); 
    }
    this_Imply_0=ruleImply
    { 
        $current = $this_Imply_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUpperAccess().getUpperLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='>=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpperAccess().getGreaterThanSignEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpperAccess().getRightOperandImplyParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleImply		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpperRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Imply");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImply
entryRuleImply returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplyRule()); }
	 iv_ruleImply=ruleImply 
	 { $current=$iv_ruleImply.current; } 
	 EOF 
;

// Rule Imply
ruleImply returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImplyAccess().getNotParserRuleCall_0()); 
    }
    this_Not_0=ruleNot
    { 
        $current = $this_Not_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImplyAccess().getImplyLeftOperandAction_1_0(),
            $current);
    }
)	otherlv_2='=>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImplyAccess().getEqualsSignGreaterThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplyAccess().getRightOperandNotParserRuleCall_1_2_0()); 
	    }
		lv_rightOperand_3_0=ruleNot		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplyRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"Not");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	 iv_ruleNot=ruleNot 
	 { $current=$iv_ruleNot.current; } 
	 EOF 
;

// Rule Not
ruleNot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='~' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotAccess().getTildeKeyword_0_0_0());
    }

    |	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotAccess().getNotKeyword_0_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotAccess().getOperandAtomParserRuleCall_0_1_0()); 
	    }
		lv_operand_2_0=ruleAtom		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"Atom");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNotAccess().getAtomParserRuleCall_1()); 
    }
    this_Atom_3=ruleAtom
    { 
        $current = $this_Atom_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtom
entryRuleAtom returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	 iv_ruleAtom=ruleAtom 
	 { $current=$iv_ruleAtom.current; } 
	 EOF 
;

// Rule Atom
ruleAtom returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getBooleanLiteralParserRuleCall_0()); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getStringLiteralParserRuleCall_1()); 
    }
    this_StringLiteral_1=ruleStringLiteral
    { 
        $current = $this_StringLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getIntegerLiteralParserRuleCall_2()); 
    }
    this_IntegerLiteral_2=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomAccess().getVariableRefParserRuleCall_3()); 
    }
    this_VariableRef_3=ruleVariableRef
    { 
        $current = $this_VariableRef_3.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomAccess().getExpressionParserRuleCall_4_1()); 
    }
    this_Expression_5=ruleExpression
    { 
        $current = $this_Expression_5.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAtomAccess().getRightParenthesisKeyword_4_2());
    }
))
;





// Entry rule entryRuleEventRef
entryRuleEventRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRefRule()); }
	 iv_ruleEventRef=ruleEventRef 
	 { $current=$iv_ruleEventRef.current; } 
	 EOF 
;

// Rule EventRef
ruleEventRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEventRefAccess().getVariableNamedElementCrossReference_0_0()); 
	}

)
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEventRefAccess().getNestedQualifiedEventRefTargetAction_1_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventRefAccess().getFullStopKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRefRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getEventRefAccess().getNestedVariableNamedElementCrossReference_1_2_0()); 
	}

)
))*)
;





// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	 iv_ruleVariableRef=ruleVariableRef 
	 { $current=$iv_ruleVariableRef.current; } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableRefAccess().getVariableNamedElementCrossReference_0_0()); 
	}

)
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getVariableRefAccess().getNestedQualifiedVariableRefTargetAction_1_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableRefAccess().getFullStopKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRefRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getVariableRefAccess().getNestedVariableNamedElementCrossReference_1_2_0()); 
	}

)
))*)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=	'true' 
    {
        newLeafNode(lv_value_0_1, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_1, null);
	    }

    |		lv_value_0_2=	'false' 
    {
        newLeafNode(lv_value_0_2, grammarAccess.getBooleanLiteralAccess().getValueFalseKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Rule PrimitiveTypeKind
rulePrimitiveTypeKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='integer' 
	{
        $current = grammarAccess.getPrimitiveTypeKindAccess().getINTEGEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeKindAccess().getINTEGEREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bool' 
	{
        $current = grammarAccess.getPrimitiveTypeKindAccess().getBOOLEANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeKindAccess().getBOOLEANEnumLiteralDeclaration_1()); 
    }
));



// Rule FlowKind
ruleFlowKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='in' 
	{
        $current = grammarAccess.getFlowKindAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFlowKindAccess().getINEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='out' 
	{
        $current = grammarAccess.getFlowKindAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFlowKindAccess().getOUTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='inout' 
	{
        $current = grammarAccess.getFlowKindAccess().getINOUTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFlowKindAccess().getINOUTEnumLiteralDeclaration_2()); 
    }
));





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


